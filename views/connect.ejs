<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skidrop Connect</title>
    <link rel="stylesheet" href="assets/connect.css">
</head>
<body>
    <div class="container">
        <!-- Top Navigation Bar -->
        <nav class="top-nav" style="padding: 15px; border-radius: 20px;">
            <h1 class="app-title">Skidrop Connect</h1>
            <div class="nav-actions">
                <button class="nav-btn" onclick="window.location.href = '/'" title="Go to Share">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                        <polyline points="7,10 12,15 17,10"/>
                        <line x1="12" y1="15" x2="12" y2="3"/>
                    </svg>
                    <span class="nav-text">Share</span>
                </button>
                <button class="nav-btn refresh-btn" onclick="window.location.reload()" title="Refresh devices">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="23,4 23,10 17,10"/>
                        <polyline points="1,20 1,14 7,14"/>
                        <path d="m3.51,9a9,9 0 0,1 14.85,-3.36L23,10M1,14l4.64,4.36A9,9 0 0,0 20.49,15"/>
                    </svg>
                    <span class="nav-text">Refresh</span>
                </button>
            </div>
        </nav>

        <!-- Devices Section -->
        <section class="devices-section">
            <h2 class="section-title">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"/>
                    <path d="m21 21-4.35-4.35"/>
                </svg>
                Available Devices
            </h2>
            
            <div id="devices-container" class="devices-container">
                <div class="loading-state">
                    <div class="spinner"></div>
                    <p>Searching for devices...</p>
                </div>
            </div>
        </section>
    </div>

    <script>
        const container = document.getElementById('devices-container');

        async function loadDevices() {
            try {
                const res = await fetch('/devices');
                let devices = await res.json();

                // Add current device for testing
                devices.push({ deviceName: "This Device", ip: "192.168.1.198", port: "8005" });

                if (devices.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                                <circle cx="11" cy="11" r="8"/>
                                <path d="m21 21-4.35-4.35"/>
                            </svg>
                            <p>No devices found</p>
                            <span>Make sure other devices are on the same network</span>
                        </div>
                    `;
                    return;
                } 

                container.innerHTML = '';
                devices.forEach((device, index) => {
                    const deviceCard = document.createElement('div');
                    deviceCard.className = 'device-card';
                    deviceCard.innerHTML = `
                        <div class="device-header">
                            <div class="device-avatar">
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
                                    <line x1="8" y1="21" x2="16" y2="21"/>
                                    <line x1="12" y1="17" x2="12" y2="21"/>
                                </svg>
                            </div>
                            <div class="device-info">
                                <h3 class="device-name">${device.deviceName}</h3>
                                <p class="device-address">${device.ip}:${device.port}</p>
                                <span class="device-status">Available</span>
                            </div>
                            <div class="device-actions">
                                <button class="connect-btn" onclick="event.preventDefault(); promptPin('${device.ip}', '${device.port}')">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/>
                                        <polyline points="15,3 21,3 21,9"/>
                                        <line x1="10" y1="14" x2="21" y2="3"/>
                                    </svg>
                                    <span>Connect</span>
                                </button>
                                <button class="toggle-files-btn" onclick="toggleDeviceFiles('${device.ip}-${device.port}')" title="Show/Hide Files">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <polyline points="6,9 12,15 18,9"/>
                                    </svg>
                                </button>
                            </div>
                        </div>

                        <div class="device-files" id="files-${device.ip}-${device.port}" style="display: none;">
                            <div class="files-header">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"/>
                                </svg>
                                <span>Available Files</span>
                            </div>
                            <div class="device-files-list" id="files-list-${device.ip}-${device.port}">
                                <div class="loading-files">
                                    <div class="spinner-small"></div>
                                    <span>Loading files...</span>
                                </div>
                            </div>
                        </div>
                    `;
                    container.appendChild(deviceCard);
                });
            } catch (error) {
                console.error('Error loading devices:', error);
                container.innerHTML = `
                    <div class="error-state">
                        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                            <circle cx="12" cy="12" r="10"/>
                            <line x1="12" y1="8" x2="12" y2="12"/>
                            <line x1="12" y1="16" x2="12.01" y2="16"/>
                        </svg>
                        <p>Failed to load devices</p>
                        <span>Check your network connection and try again</span>
                    </div>
                `;
            }
        }

        // Toggle device files visibility
        function toggleDeviceFiles(deviceId) {
            const filesSection = document.getElementById(`files-${deviceId}`);
            const toggleBtn = event.target.closest('.toggle-files-btn');
            const toggleIcon = toggleBtn.querySelector('svg polyline');

            if (filesSection.style.display === 'none') {
                filesSection.style.display = 'block';
                toggleIcon.setAttribute('points', '18,15 12,9 6,15'); // Up arrow
                toggleBtn.classList.add('expanded');
                loadDeviceFiles(deviceId);
            } else {
                filesSection.style.display = 'none';
                toggleIcon.setAttribute('points', '6,9 12,15 18,9'); // Down arrow
                toggleBtn.classList.remove('expanded');
            }
        }

        // Load files from a specific device
        async function loadDeviceFiles(deviceId) {
            const [ip, port] = deviceId.split('-');
            const filesList = document.getElementById(`files-list-${deviceId}`);

            try {
                const response = await fetch('/loadfiles', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ip, port, pin: 1234 })
                });

                const data = await response.json();
                const files = data.files || [];

                if (files.length === 0) {
                    filesList.innerHTML = `
                        <div class="no-files">
                            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                                <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"/>
                                <polyline points="13,2 13,9 20,9"/>
                            </svg>
                            <span>No files available</span>
                        </div>
                    `;
                } else {
                    filesList.innerHTML = files.map(file => 
                    `
                        <div class="device-file-item">
                            <div class="file-icon-small">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                                    <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"/>
                                    <polyline points="13,2 13,9 20,9"/>
                                </svg>
                            </div>
                            <div class="file-details">
                                <span class="file-name-small">${file.name}</span>
                                <span class="file-size-small">${formatFileSize(file.size)}</span>
                            </div>
                            <a href="http://${ip}:${port}/uploads/${file.name}" target="_blank" class="download-file-btn" title="Download ${file.name}">
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                                    <polyline points="7,10 12,15 17,10"/>
                                    <line x1="12" y1="15" x2="12" y2="3"/>
                                </svg>
                            </a>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error loading files:', error);
                filesList.innerHTML = `
                    <div class="error-files">
                        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                            <circle cx="12" cy="12" r="10"/>
                            <line x1="12" y1="8" x2="12" y2="12"/>
                            <line x1="12" y1="16" x2="12.01" y2="16"/>
                        </svg>
                        <span>Failed to load files</span>
                    </div>
                `;
            }
        }

        // PIN prompt function
        async function promptPin(ip, port) {
            const pin = prompt(`Enter PIN for ${ip}:${port}`);

            if (!pin) return;

            try {
                const res = await fetch('/devices');
                const devices = await res.json();

                const device = devices.find(device => device.pin === pin && device.ip === ip && device.port === port);

                if (!device) {
                    alert('Invalid PIN or device not found.');
                    return;
                }

                // Show success feedback
                const connectBtn = event.target.closest('.connect-btn');
                const originalContent = connectBtn.innerHTML;
                
                connectBtn.innerHTML = `
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="20,6 9,17 4,12"/>
                    </svg>
                    <span>Connected</span>
                `;
                connectBtn.style.background = '#34C759';
                
                setTimeout(() => {
                    connectBtn.innerHTML = originalContent;
                    connectBtn.style.background = '';
                }, 2000);
                
            } catch (err) {
                console.error('Error verifying PIN:', err);
                alert('Failed to connect. Device might be offline or not responding.');
            }
        }

        // Helper function to format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Auto-refresh devices every 30 seconds
        setInterval(loadDevices, 30000);

        // Initial load
        loadDevices();
    </script>
</body>
</html>