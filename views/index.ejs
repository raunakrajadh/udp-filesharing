<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Skidrop</title>
    <link rel="stylesheet" href="/assets/index.css">
</head>
<body>
    <div class="container">

        <div style="display: flex; align-items: center; justify-content: space-between;">
            <h1 style="margin: 0;">Device Connector</h1>
            <button class="connect-btn" onclick="window.location.href = '/connect'">Connect To Other Device</button>
        </div>

        <br>

        <!-- Header Section -->
        <header class="header">
            <div class="device-info">
                <div class="device-avatar">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
                        <line x1="8" y1="21" x2="16" y2="21"/>
                        <line x1="12" y1="17" x2="12" y2="21"/>
                    </svg>
                </div>
                <div class="device-details">
                    <h1 class="device-name"><%= deviceName %></h1>
                    <p class="device-address"><%= ip %>:<%= port %></p>
                </div>
            </div>
            <div class="pin-display">
                <span class="pin-label">PIN</span>
                <span class="pin-code"><%= pin %></span>
            </div>
        </header>

        <!-- Devices Section -->
        <!-- <section class="devices-section">
            <h3 class="section-title">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="3"/>
                    <path d="M12 1v6m0 6v6"/>
                    <path d="m21 12-6 0m-6 0-6 0"/>
                </svg>
                Nearby Devices
            </h3>
            <div class="devices-grid" id="device-list">
                <div class="loading-state">
                    <div class="spinner"></div>
                    <p>Discovering devices...</p>
                </div>
            </div>
        </section> -->

        <!-- Upload Section -->
        <section class="upload-section">
            <div class="upload-card" id="uploadCard">
                <div class="upload-content" id="uploadContent">
                    <div class="upload-icon">
                        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                            <polyline points="7,10 12,15 17,10"/>
                            <line x1="12" y1="15" x2="12" y2="3"/>
                        </svg>
                    </div>
                    <h2>Drop a file here to share</h2>
                    <p>or tap to browse</p>
                    <button type="button" class="browse-btn" id="browseBtn">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                            <polyline points="14,2 14,8 20,8"/>
                            <path d="M16 13a4 4 0 0 1 0 6H5a4 4 0 0 1 0-6"/>
                        </svg>
                        Choose File
                    </button>
                </div>

                <!-- File Preview (hidden initially) -->
                <div class="file-preview" id="filePreview" style="display: none;">
                    <div class="preview-icon" id="previewIcon">
                        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                            <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"/>
                            <polyline points="13,2 13,9 20,9"/>
                        </svg>
                    </div>
                    <div class="preview-info">
                        <h3 id="fileName">filename.txt</h3>
                        <p id="fileSize">1.2 MB</p>
                    </div>
                    <div class="preview-actions">
                        <button type="button" class="change-btn" id="changeBtn">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                                <polyline points="14,2 14,8 20,8"/>
                            </svg>
                            Change
                        </button>
                        <button type="submit" class="upload-btn" id="uploadBtn" form="uploadForm">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                                <polyline points="17,8 12,3 7,8"/>
                                <line x1="12" y1="3" x2="12" y2="15"/>
                            </svg>
                            Upload
                        </button>
                    </div>
                </div>

                <form action="/upload" method="POST" enctype="multipart/form-data" id="uploadForm">
                    <input type="file" name="file" id="fileInput" required />
                </form>
            </div>
        </section>

        <!-- Files Section -->
        <section class="files-section">
            <h3 class="section-title">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"/>
                </svg>
                Shared Files
            </h3>
            <div class="files-grid">
                <% if (files.length === 0) { %>
                    <div class="empty-state">
                        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
                            <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"/>
                            <polyline points="13,2 13,9 20,9"/>
                        </svg>
                        <p>No files shared yet</p>
                        <span>Upload your first file to get started</span>
                    </div>
                <% } else { %>
                    <% files.forEach(function(file) { %>
                        <div class="file-card">
                            <div class="file-icon">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                                    <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"/>
                                    <polyline points="13,2 13,9 20,9"/>
                                </svg>
                            </div>
                            <div class="file-info">
                                <h4 class="file-name"><%= file %></h4>
                                <p class="file-meta">Ready to download</p>
                            </div>
                            <div class="file-actions">
                                <a href="/<%= file %>" target="_blank" class="action-btn download-btn" title="Download">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                                        <polyline points="7,10 12,15 17,10"/>
                                        <line x1="12" y1="15" x2="12" y2="3"/>
                                    </svg>
                                </a>
                                <form class="delete-form" action="/delete" method="POST" onsubmit="return confirm('Delete <%= file %>?');">
                                    <input type="hidden" name="filename" value="<%= file %>" />
                                    <button type="submit" class="action-btn delete-btn" title="Delete">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                            <polyline points="3,6 5,6 21,6"/>
                                            <path d="m19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"/>
                                        </svg>
                                    </button>
                                </form>
                            </div>
                        </div>
                    <% }); %>
                <% } %>
            </div>
        </section>
    </div>

    <script>
        // File upload functionality
        const uploadCard = document.getElementById('uploadCard');
        const fileInput = document.getElementById('fileInput');
        const uploadForm = document.getElementById('uploadForm');
        const uploadContent = document.getElementById('uploadContent');
        const filePreview = document.getElementById('filePreview');
        const browseBtn = document.getElementById('browseBtn');
        const changeBtn = document.getElementById('changeBtn');
        const uploadBtn = document.getElementById('uploadBtn');
        const fileName = document.getElementById('fileName');
        const fileSize = document.getElementById('fileSize');

        // File selection handlers
        browseBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            fileInput.click();
        });

        changeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            fileInput.click();
        });

        uploadCard.addEventListener('click', (e) => {
            if (e.target === uploadCard || e.target.closest('#uploadContent')) {
                fileInput.click();
            }
        });

        // File input change handler
        fileInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                showFilePreview(file);
            }
        });

        // Drag and drop functionality
        uploadCard.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadCard.classList.add('drag-over');
        });

        uploadCard.addEventListener('dragleave', (e) => {
            if (!uploadCard.contains(e.relatedTarget)) {
                uploadCard.classList.remove('drag-over');
            }
        });

        uploadCard.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadCard.classList.remove('drag-over');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                const file = files[0]; // Only take the first file
                fileInput.files = e.dataTransfer.files;
                showFilePreview(file);
            }
        });

        // Show file preview
        function showFilePreview(file) {
            fileName.textContent = file.name;
            fileSize.textContent = formatFileSize(file.size);
            
            uploadContent.style.display = 'none';
            filePreview.style.display = 'flex';
            
            uploadCard.classList.add('file-selected');
        }

        // Format file size
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // Upload form submission
        uploadForm.addEventListener('submit', (e) => {
            uploadBtn.innerHTML = `
                <div class="spinner-small"></div>
                Uploading...
            `;
            uploadBtn.disabled = true;
        });

        // Device discovery
        // async function loadDevices() {
        //     try {
        //         const res = await fetch('/devices');
        //         const devices = await res.json();
        //         const container = document.getElementById('device-list');
                
        //         if (devices.length === 0) {
        //             container.innerHTML = `
        //                 <div class="empty-state">
        //                     <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
        //                         <circle cx="11" cy="11" r="8"/>
        //                         <path d="m21 21-4.35-4.35"/>
        //                     </svg>
        //                     <p>No devices found</p>
        //                     <span>Make sure other devices are on the same network</span>
        //                 </div>
        //             `;
        //             return;
        //         }

        //         container.innerHTML = '';
        //         devices.forEach(device => {
        //             const deviceCard = document.createElement('div');
        //             deviceCard.className = 'device-card';
        //             deviceCard.innerHTML = `
        //                 <div class="device-avatar">
        //                     <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        //                         <rect x="2" y="3" width="20" height="14" rx="2" ry="2"/>
        //                         <line x1="8" y1="21" x2="16" y2="21"/>
        //                         <line x1="12" y1="17" x2="12" y2="21"/>
        //                     </svg>
        //                 </div>
        //                 <div class="device-info">
        //                     <h4 class="device-name">${device.deviceName}</h4>
        //                     <p class="device-address">${device.ip}:${device.port}</p>
        //                 </div>
        //                 <button class="connect-btn" onclick="event.preventDefault(); promptPin('${device.ip}', ${device.port})">
        //                     <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        //                         <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/>
        //                         <polyline points="15,3 21,3 21,9"/>
        //                         <line x1="10" y1="14" x2="21" y2="3"/>
        //                     </svg>
        //                     Connect
        //                 </button>
        //             `;
        //             container.appendChild(deviceCard);
        //         });
        //     } catch (err) {
        //         document.getElementById('device-list').innerHTML = `
        //             <div class="error-state">
        //                 <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1">
        //                     <circle cx="12" cy="12" r="10"/>
        //                     <line x1="12" y1="8" x2="12" y2="12"/>
        //                     <line x1="12" y1="16" x2="12.01" y2="16"/>
        //                 </svg>
        //                 <p>Error loading devices</p>
        //                 <span>Check your network connection</span>
        //             </div>
        //         `;
        //         console.error(err);
        //     }
        // }

        // async function promptPin(ip, port) {
        //     const pin = prompt(`Enter PIN for ${ip}:${port}`);

        //     if (!pin) return;

        //     try {
        //         const res = await fetch('/devices');
        //         const devices = await res.json();

        //         const device = devices.find(device => device.pin === pin && device.ip === ip && device.port === port);

        //         if (!device) {
        //             alert('Invalid PIN or device not found.');
        //             return;
        //         }

        //         alert(`Connected to ${device.deviceName} at ${device.ip}:${device.port}`);
                
        //     } catch (err) {
        //         console.error('Error verifying PIN:', err);
        //         alert('Failed to connect. Device might be offline or not responding.');
        //     }
        // }


        // // Auto-refresh devices
        // setInterval(loadDevices, 3000);
        // loadDevices();
    </script>
</body>
</html>